c++

3.7(수)

#include <iostream>  : c++에서 기본 제공하는 헤더
#include "circle.h" : 내가 만든 헤더

컴파일러는 문법체크만 >>> linker에서 에러발생


헤더 파일과 소스 파일이 분리 되어있음
header > 선언
source > 정의



3.12(월)

gcc >> c컴파일러
g++ >> c++컴파일러

g++ -o Helloworld Helloworld.cpp


cpp만 컴파일 h파일은 컴파일x 

--save-temps
Hello.ii , Hello.s

gcc를 이용한 컴파일 : 뒤에 -lstdc++

-Wall -W : warning, error를 알려줌

auto length = 0.31313
auto : 타입을 자동으로 맞춰줌(컴파일할때)

3.14(수)

using namespace std;

코딩규약
변수 : 소문자로시작
함수 : 대문자로시작

키워드
*volatile


unsigned : 음수가 아닌 값만을 나타냄
unsigned int : 0~ 4294967295
signed : 부호를 가짐 흔히생략	


기호상수 : 대문자
예) PI , TAX_RATE
#define TAX_RATE 0.15
const int MONTH = 12;

이스케이프 시퀀스 
/0 /n /t

경로 표시
역슬래시 \\

and 앞에것이 false > 뒤에거검사x
or 앞에거 true > 뒤에거검사x

3항 연산자
exp1 ? exp2 : exp3
exp1 이 참이면 exp2 반환 거짓이면 exp3반환

3.19(월)

switch 
case 문에 0,1,2 x 대신 name : success, error, warning.

scanf

enum RESULT
{
}


3.21(수)

for ( int i = 0, j = 0; i< 10; i++, j++) 가능


int sum(int a, int b)
{
	a += b;
	return a; //임의의 변수에 a를 복사해서 반환하기 때문에 메모리사용량은 똑같다.
}

call by value > 12byte 사용 복사해서 가져오기 때



int sum(int& a, int& b)
{
	a += b;
	return a;
}

call by reference > 4byte 사용, 속도 빨라짐

선언부와 정의부의 차이
선언부에서는 매개변수의 이름 필요 x
int sum(int&, int); << 선언부
int sum(int& a, int b){ << 정의부
}

디폴트 매개 변수 앞에거 생략 불가능

int sum(int a, int b = 0, bool negative = false)
{
}

인라인함수 : 함수를 호출하지않고 코드를 복사하여 넣는것



3.26(월)

배열 생성 : 
int grade[10]; > 40byte
char name[50]; > 50byte
char src[10], dst[10];
int index score[10];

배열 : 연속된 메모리 공간에 존재 
인덱스 : 시작에서 몇byte 떨어져 있나 grade[0] : 첫뻔째 4바이트

#include <cstdlib>
rand() 사용 > 0부터 max int까지
rand() % 100; >>> 0부터 99까지 난수 만들기 

c++ length 없음. 배열 길이 계산하는방법 없음.
const int SIZE로 배열의 길이를 기억해둠.

문자배열 끝 : 0

배열의 복사(비교): 전체를 for문으로 돌면서 하나하나 카피해야함. > 속도가 느리기때문에 안씀.

동적배열: STL 라이브러리로 제공 vector

const int FACES = 6;
int freq[FACES] = { 0 }; 하나만 선언하면 나머지 0 이된다.


배열을 함수에 인자로 넘기면 reference로 넘어간다.
인자에 const char src[]처럼 const 를붙여주면 배열 값을 변경하지못함.

const > 붙일 수 있으면 다붙여라.

2차원 배열
int s[3][10]; 행,열
2차원 배열은 1차원적으로 구현된다. 메모리는 다 1차원으로 저장됨.


선택정렬(selection sort): 정렬이 안된 숫자들중에서 최소값을 선택
하여 배열의 첫번째 요소와 교환 (장점: 구현하기쉬움, 단점: 느림)On^2

이진 탐색(binary search): 정렬된 배열의 중앙에 위치한 원소와 비
교 되풀이 < 없는 케이스 : low , high가 역전이됨.


포인터 : 주소를 넣을 수 있는 변수.
변수의 주소 : & (&i)

int i = 10;
int* p = &i; (* : 포인터 연산자)
cout << *p; (10을 출력)
*p = 100; 가능

char c = 'a';
char* pc = &c;

++p;  <<< 주소를 한칸 더감(4byte증가)
++c; <<< (1byte 증가)

포인터는 char여도 4byte;


int a[10] = { 1, };
a = &a[0];
cout << a; (첫번째 원소의 주소값)

int* pa = a;
for (int i = 0; i <10; i++)
{
	cout << *pa;
	++pa;
}

/*
for (int i = 0; i <10; i++)
{
	cout << pa[i];
}
*/


const가 붙으면 input이라고생각함 일반적으로.
;


int* p = &a

(*p)++

초기화하기 :

int* p = NULL; (=0)


동적 메모리 할당과정 
1.new
2.사용
3.delete


삭제못하는 메모리 댕글포인터링


4.2(월)

자바는 모든 변수가 포인터;

c++

class MemTest
{
	public:
		val;
	proteced:
	private:
}

int main()
{
	MemTest test; <<<정적으로 생성

	MemTest* pTest; <<< 모든 포인터는 4byte (주소를 담을 공간만 생성)
}

--------------------------------------------------------------

int main()
{
	Memtest* pTest = new MemTest; (MemTest를 담을공간을만들어라)

	delete pTest;


	int arr[10];

	int count = 50;
	int* pArr = new int[count]; //배열에 변수 삽입하는 방법

	delete[] pArr; //배열은 배열로 지워야함(delete[])
}

pTest = (MemTest*)pArr; < 포인터끼리는 강제로 형변환가능


=================================================================

void Swap( int x , int y)
{
	int tmep = x;
	x = y;
	y = temp;
}

int main()
{
	int x =3, y =5;
	Swap(x, y);
	cout << x; //3 출력 ( call by value , 값을 복사해서 사용했기때문)
}

-----------------------------------------------------------------------------

void SwapByPointer( int* x , int* y)
{
	int tmep = *x;
	*x = *y;
	*y = temp;
}

int main()
{
	int x = 3, y = 5;
	SwapByPointer(&x, &y);
	cout << x; //5 출력 (call by reference)
}
------------------------------------------------------------------------------


void Add(int* x, int addVal)
{
	int add = *x + addVal;
	x = &add;
}

void Add(MemTest test) // (MemTest* test) 자바처럼하려면 포인터
{
	test.val++ //.은 값일때만가능 포인터x test->val++
	cout << test.val; //값을 바꾸지않음. 속도때문에 이렇게 출력하지 않음.
	//cout << test->val //일반적으로 속도때문에 포인터로 넘겨서 출력.
}


int main()
{
	
	int* pn;

	if(ture)
	{
		int n;	
		pn = &n; //포인터안에 지역변수 사용 x 밖으로 나가면 포인터가 가리키는 값이 사라짐.
	}

	MemTest test;
	test.val = 1;
	Add(test); //Add(&test);자바처럼하려면 참조로.
	cout << test.val; // 1이 나옴 (복사본)

}


---------------------------------------------------------------------------
2번째 call by reference.

void Swap(int x , int y) //값이 바뀌지않음.
{
	int temp = x;
	x = y;
	y = temp;
}

int main()
{

	int x = 1; //4byte
	
	int* p = &x; // x의 주소값.  4byte + 4byte
	int& r = x; // 참조.(reference) 메모리가 늘어나지않음. 4 + 4 + 0 = 8byte
	++r;
	cout << x; // 2
}


int& r; // 혼자선언 후 따로
r = x; // 사용불가.

------------------------------------------------

null pointer exeption (포인터가 가리키는 값이 NULL일때)
포인터의 값을 항상 체크해야 함.

if (!x)
	return;

referece를 이용한 스왑

void Swap(int& x, int& y)
{ 
	int temp =  x; x = y; y = temp;
}

===============================================

char 배열

char szTest[6] = {"Hello"};





4.4(수)

암묵적 약속 : const가 있으면 입력값 없으면 출력값.

포인터 vs 레퍼런스
: NULL이 될 가능성이 있는 경우에도 포인터를 사용
: 일반적으로 레퍼런스를 사용하는게 편함
: 참조하는 대상이 수시로 변경되는 경우 포인터를 사용

inline
될수도있고 안될수도있다.
=조건 알수없음 컴파일에 따라 다름.

const int* p1 : p1이 가리키는 내용이 상수가된다.
int* const p2; : p2 내용이 변경될수없다.

이름공간지정
namespace Graphics {
	int mode;
	int x, y;
	void drw();
...
}
mode변수를 사용하려면
Graphics: mode =1;


class
아무것도 지정하지않으면 디폴트로 private

남이 보기 위한 코드를 짜야함.

구조체
클래스와 구조체 차이없음. 구조체는 defalut가 public임.
데이터의 패키지로사용.

생성자
생성자를 안만들어도 디폴트생성자와 복사생성자생김
복사생성자 : 
Character b(100, 100);
Character a(b);

Car c4 = Car(0, 1, "blue"); 먼저 임시객체를 만들고 이것을 c4에 복사. // 비용 3개 1.만들고 2. 만들고 3. 2에 만든것을 1에 복사.

자바 this 대신 Car(0, 0, c); 생성자 내에서만 가능.

소멸자
~Car(){
} //인자가없음.

간단히 초기화 할 수 있는 형식
Car(int s, int g, string c) : speed(s), gear(g), color(c) {
...// 만약 더 하고 싶은 초기화가 있다면 여기에
}

헤더에서 선언만하고 cpp에서 구현. 일반적으로


m_hp >> 멤버변수라고 쓰임
: 생성자 m_hp = hp;


int a = 5; >>>  int a;
		a = 5;

int a(5); 도 됨.



포인터만 카피 = 얇은카피

============================================
4.9(월)

헤더,실행파일
커플링을 줄여야함(상속을 최대한 줄여야함 > 포함으로)

때린건가  ? 맞은건가? > 맞은것
객체는 자기 중심적으로.


================================================
4.11(수)
만약 divide 함수를 만든다면 bool로 만들어서 0으로 나눌 때 return false를함.

함수를 int형으로,,
#define NOT_DEVISE_ERROR 21
여러 에러가 있을때 int값으로 리턴함. >> 숫자로 하면 알아먹기 힘드니 define해서 사용.

-----------------------------------------------

상속(is a 관계) : 구체화시킨다 ( concrete) <---> 일반화(추상화)시킨다.
기능을 받으면 상속이다?? --> X (강아지는 인간이다??? X)
A is a B : A는 B에서 상속 받았다.

포함(has a 관계) 캐릭터 Has a 인벤토리 , 인벤토리 Has a 아이템
A has a B : A는 B를 가지고(포함) 있다.

------------------------------------------------------

포함관계 : Composition

문 Door : 위치, 화면 표시, 열림, 닫힘, 상태

열리지않는 문, 열리는 문

문이라는 빈 class > 기능별로 class를 만듦.

하이엘프 사제, 하이엘프 궁수 >>상속??
오크 사제 , 오크 궁수 >> 사제, 궁수라는 component를 만들어서 포함시키는게 더 괜찮은 방법. 

-----------------------------------------------------

객체의 동적생성
Car myCar; // 정적 메모리할당
Car *pCar = new Car(); //동적 메모리 할당

객체 포인터를 통한 멤버 접근.
pCar->speed = 100;

--------------------------------------------------------

멤버 변수에 const를 붙이는 경우.

class Car
{
	const int serial;
	...
}
public:
	Car(int s, string c) : serial(s)
	{
		color = c;
	}
}


멤버 함수에 const를 붙이는 경우 : 멤버 함수를 변경할 수 없다.
void displayInfo() const
{
	...
}

int GetHp() const {return m_hp}; //const 객체가 호출하는 함수(멤버변수를 바꿀수없는 객체)
int GetHp() {return m_hp};

------------------------------------------

static 멤버 : 객체마다 하나씩 있는 변수가 아니라 클래스하나에 있는 변수.
사용하기 위해서 cpp에서 정의해줘야함. 객체를 생성하지 않아도 사용가능.
Game::m_Count = 0;

math::multiply(3,3);

객체가없는 static함수가 멤버 변수에 접근 >> 에러(static함수는 static변수에만 접근가능)



================================================


4.16(월)

int& r; <<레퍼런스는 무조건 원본이 있어야함.
포인터는 주소를 담고있는 변수라서 가능.

const int MAX_COUNT = 10; // 상수는 변경x
상수는 무조건 기본값이 있어야함. 기본값 없이는 못만듦.


int age_1;
int* p = &age_1;
p = &age_2;
*p = 10; //age_2의 값을 바꿈.

const위치

int* const p = &age_1; //p가 상수, 주소값이 상수 x 주소를 못바
p = &age_2; // 오류
*p = 10; // 됨.

const int* p = &age_1; // p를 바꿀수잇음. p가 담고있는 주소가 const.
p = &age_2; // 됨
*p = 10; // 안됨.

const int* const p = &age_1; 
p = &age_2; // 안됨
*p = 10; // 안됨.

------------------------------------------------------

void Sub(int& x, int y)
{
	x -= y;
}

참조

int a = 100, b =50;
Sub(a, b); // a = 50;

상수는 비상수를 참조할수있지만 역은성립x

void Sub(int& x, const int& y)
{
}

Sub(a,50);

------------------------------------------------------

#include <stdlib>

void PrintArray(int arr[], int len) // 어레이를 복사한다. 배열의 참조형사용.
{
	for(int i = 0; i < len; ++i)
	{
		cout << arr[i];
	}
}

int arr[100]; //100(상수) 함부로 사용 x
>> int length = 100;
>> //int arr[length]; x 배열은 상수로만 생성할수있음 동적할당 필요
>> int* arr = new int[length];

for( int i = 0; i<length; ++i)
{
	arr[i] = rand();
}

PrintArray(arr, length);
delete[] arr; // 동적할당은 항상 해제해줘야함.


//동적배열이 아닌 원래형태로 구현

int arrSize = 100;
int arr[100];
sizeof(int) // 4byte 반환
sizeof(arr) // 400 >> (int arrCount = sizeof(arr) / sizeof(arr[0]) 배열의 크기를 알 수 있는 패턴)
for(int a : arr) //arr의 사이즈를 알 수 있다.
{
	a = rand();
}

PrintArray(arr, arrSize);

---------------------------------------------

void PrintArray(int* arr[], int len) // 배열은 참조할 수 없다.(포인터사용)
{
	for(int i = 0; i < len; ++i)
	{
		cout << arr[i];
	}
}

arr = &arr[0] 기때문에
PrintArray(arr, arrSize); 오류가 나지 않는다.
int* p = arr;가능

-------------------------------------------------
대문자를 소문자로 바꾸는 함수.

char* ChangeWordToSmall(const char* szText, int len, char* szNew)
{

	for(int i = 0; i < len; ++i)
	{
		if(szText[i] > 'A' && szText[i] <= 'Z')
		{
			szNew[i] = szText[i] + 'a' - 'A';
		}
	}

	szNew[len] = '!';

	return szNew;
}

메인
const char* text = "HELLO WORLD"
char szNew[128] ={0,};
char* newWord = ChangeWordToSmall(text,strlen(text),szNew);

---------------------------------------------------------------
클래스

Exam exam(10);

class Exam
{
public:
	Exam(int number = 10) { m_number = number; } //디폴트 생성자도 포함
	~Exam();

	void SetNumber(const int& number) { m_number = number; } //상수변수도 받을수잇음.
	int GetNumber() const {return m_number; } //멤버변수변경 x > const

protected:
	int m_number;

}

===========================================================================
4.18(수)

상속 : 객체를 상속받음. A is B, A는 B 역할을 할 수 있다. // A는 B의 자식.

복사생성자 문제 // pdf 8 다형성참고

Character(const Character& src); //복사 생성자;
vector의 capacity가 부족해지면 원소들을 복사하면서 계속 자리를 할당하기때문.
characters.reserve(10) //미리 자리를 할당해줘서 복사가 일어나지 않게 한다.

virtual = 오버라이딩하기위해 사용 (부모에사용)
포인터만이 다형성을 가질 수 있음.

